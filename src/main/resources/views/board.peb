    {% extends './base.peb' %}
        {% block content %}
        <div id="usernameModal" class="modal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Hi Stranger, introduce yourself</h5>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3 row">
                            <label for="username" class="col-sm-2 col-form-label">Nickname</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="username" autocomplete="off" required>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="connect()">Connect</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="MultipleContainers" class="row flex-fill fill d-flex justify-content-start">
            <div id="good" class="retro-category col-3">
                <header>Good</header>
                <section class="border border-2 rounded-1 border-success dropdown mh-90 StackedList"></section>
            </div>
            <div id="bad" class="retro-category col-3">
                <header>Bad</header>
                <section class="border border-2 rounded-1 border-danger dropdown mh-90 StackedList"></section>
            </div>
            <div id="actions" class="retro-category col-3">
                <header>Actions</header>
                <section class="border border-2 rounded-1 border-primary dropdown mh-90 StackedList"></section>
            </div>
            <div id="kudos" class="retro-category col-3">
                <header>Kudos</header>
                <section class="border border-2 rounded-1 border-dark dropdown mh-90 StackedList"></section>
            </div>
        </div>

        <div class="row pb-3 text-center">
                <button type="button" class="btn btn-primary btn-sm mt-2" onclick="addCard()">Add card</button>
                <section id="cardAnchor"></section>
        </div>

        <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>
        {% endblock content%}

        {% block board_title %}
        <div class="container-fluid"><span class="navbar-brand">{{ boardTitle }}</span></div>{% endblock %}

    {% block customJavaScript %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"
            integrity="sha512-BNaRQnYJYiPSqHHDb58B0yaPfCu+Wgds8Gp/gU33kqBtgNS4tSPHuGibyoeqMV/TJlSKda6FXzoEyYGjTe+vXA=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/@shopify/draggable@1.0.0-beta.11/lib/draggable.bundle.js"></script>
    <script type="application/javascript">
        const Sortable = Draggable.Sortable;
        const Plugins = Draggable.Plugins;

        const draggableClass = 'StackedListItem--isDraggable';

        const EventType = {
            SET: 'set',
            DELETE: 'delete',
            LIKE: 'like',
            DISLIKE: 'dislike',
            ASSIGN: 'assign',
            CONNECTED: 'connected',
            DISCONNECTED: 'disconnected'
        };

        const draggableClasses = {
            draggable: draggableClass,
            capacity: 'draggable-container-parent--capacity',
        };

        const stackedListSelector = '.StackedList';
        const containersSelector = `#MultipleContainers ${stackedListSelector}, #cardAnchor`;
        const containers = document.querySelectorAll(containersSelector);

        const sortable = new Sortable(containers, {
            draggable: `.${draggableClasses.draggable}`,
            mirror: {
                constrainDimensions: true,
            },
            plugins: [Plugins.ResizeMirror],
        });

        const myModal = new bootstrap.Modal(document.getElementById('usernameModal'), {"backdrop": "static"});

        let connection;
        let output;
        let username;
        let lastOverContainer;

        sortable.on('drag:start', (evt) => {
            console.log("drag:start", evt);
            lastOverContainer = evt.sourceContainer;
        });

        sortable.on('sortable:sorted', (evt) => {
            console.log('sortable:sorted start', evt);
            // evt.dragEvent.data.source.classList.remove("assign-card") //FIXME
            if (lastOverContainer === evt.dragEvent.overContainer) {
                // evt.dragEvent.data.source.classList.remove("assign-card") //FIXME delete this class when is dragged and on cancel add again if parent is not stacked list
                return;
            }
            console.log('sortable:sorted end', evt);
            // evt.dragEvent.data.source.classList.remove("assign-card");
            lastOverContainer = evt.dragEvent.overContainer;
        });

        sortable.on('drag:stop', (evt) => {
            console.log("drag:stop-> ", evt);

        });

        sortable.on('sortable:stop', (evt) => {
            console.log("sortable:stop", evt);
            const oldContainer = evt.data.oldContainer;
            const newContainer = evt.data.newContainer;
            console.log(oldContainer, newContainer, oldContainer === newContainer);
            if (oldContainer === newContainer) {
                console.log('Moved to the same container?!');
                return;
            }
            const cardElement = evt.data.dragEvent.data.originalSource;
            const category = newContainer.closest('.retro-category').getAttribute('id');
            cardElement.classList.remove("assign-card");
            sendInternal(EventType.ASSIGN, cardElement.dataset.id, category);
        });

        $(function () {
            myModal.show();
        });

        function connect() {
            username = $('#username').val();
            if (username === null || username === undefined || username === "") {
                console.error("Nickname empty. ", username);
                return;
            }
            console.log("The username: ", username);

            myModal.hide();

            output = $('#output');
            connection = new WebSocket("ws://localhost:8080/meeting/board/{{ boardId }}/" + username);
            connection.onopen = function () {
                sendInternal(EventType.CONNECTED, null, username);
                $(".openOnConnect").collapse('toggle');
            };

            // Log errors
            connection.onerror = function (error) {
                $(".openOnConnect").collapse('toggle');
            };

            // Log messages from the server
            connection.onmessage = function (e) {
                console.log("Raw msg: ", e)
                if (e.data) {
                    appendResponse(e.data);
                }
            };
            connection.onclose = function (e) {
                appendToDocument("alert-danger", "glyphicon-exclamation-sign", "Remote closed connection.");
            };
        }

        function sendInternal(eventType, cardId, content) {
            const message = {};
            message.content = content;
            message.cardId = cardId;
            message.eventType = eventType;

            appendAndSend(message);
        }

        function appendAndSend(message) {
            // appendRequest(message);
            const json = JSON.stringify(message);
            console.log("Going to send: ", json);
            connection.send(json);
        }

        function appendResponse(message) {
            const userMessage = JSON.parse(message);
            console.log("Got msg:", userMessage);
            if (userMessage.failure != null) {
                //FIXME
                appendToDocument("alert-warning", "glyphicon-cloud-download", message.body)
            } else if (userMessage.error != null) {
                //FIXME
                appendToDocument("alert-danger", "glyphicon-cloud-download", message.body)
            } else if (Object.hasOwn(userMessage, "cardId") && Object.hasOwn(userMessage, "content") && Object.hasOwn(userMessage, "username")) {
                console.log("Going to load card: ", userMessage);
                loadCard(userMessage);
            } else {
                const eventMessage = userMessage.eventMessage;
                switch (eventMessage.eventType) {
                    case EventType.CONNECTED:
                        createToast(eventMessage.content, "joined!");
                        break;
                    case EventType.SET:
                        updateParticipantCard(userMessage)
                        break;
                    case EventType.ASSIGN:
                        assignParticipantCard(eventMessage)
                        break;
                    case EventType.DISCONNECTED:
                        createToast(eventMessage.content, "disconnected!");
                        break;
                    default:
                        console.error("Unrecognized event type:", eventMessage.eventType);
                }
            }
        }

        function updateParticipantCard(userMessage) {
            //Check if card exists, otherwise create hidden card with content
            const eventMessage = userMessage.eventMessage;
            const cards = $(containersSelector).find(`[data-id='${eventMessage.cardId}']`);
            if (cards.length > 0) {
                const card = cards.first();
                console.log("Going to update participant card:", eventMessage);
                card.find('.card-text > input').first().val(eventMessage.content);
                //TODO; add card owner
            } else {
                addCardElement(userMessage.userBoard.username, eventMessage.cardId, eventMessage.content, true, true, null);
            }
        }

        function assignParticipantCard(eventMessage) {
            const card = $(containersSelector).find(`[data-id='${eventMessage.cardId}']`).first();
            const destination = $(`#${eventMessage.content} > ${stackedListSelector}`);
            console.log("Going to move card:", card, "to:", destination);
            card.detach().removeClass('assign-card').removeClass('d-none').appendTo(destination);
        }

        function createToast(user, action) {
            console.log("Going to create toast for user:", user);
            const toastUUID = crypto.randomUUID()
            const htmlToast = `<div id="${toastUUID}" class="toast align-items-center" role="alert" aria-live="assertive" aria-atomic="true">
                                  <div class="d-flex">
                                    <div class="toast-body">
                                      <strong>${user}</strong> ${action}
                                    </div>
                                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                                  </div>
                                </div>`;
            $('.toast-container').append(htmlToast);
            $(`#${toastUUID}`).toast('show');
        }

        function appendRequest(message) {
            appendToDocument("alert-info", "glyphicon-cloud-upload", "[Server request] " + message.body)
        }

        function appendToDocument(divClass, prefix, message) {
            const pre = document.createElement("p");
            pre.style.wordWrap = "break-word";
            pre.innerHTML = '<div class="col-md-12 alert ' + divClass + '"><span class="glyphicon ' + prefix + '"></span> ' + getTime() + '<br/>' + message + '</div>';
            output.prepend(pre);
        }

        function getTime() {
            const time = new Date();
            return time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds() + '.' + time.getMilliseconds();
        }

        function disconnect() {
            console.log("Chat disconnect");
            if (connection != null) {
                connection.onclose = function () {
                }; // disable onclose handler first
                connection.close(1000);
            }
        }

        function inputChange(element) {
            const card = element.closest('.card');
            const cardId = card.dataset.id;

            sendInternal(EventType.SET, cardId, element.value);

            //Allow only if card has some text.
            if (!card.classList.contains(draggableClass) && element.value.length > 0) {
                card.classList.add(draggableClass);
            }
        }

        function addCard() {
            addCardElement(username, null, null, false, false, null);
        }

        function loadCard(card) {
            const hidden = !Object.hasOwn(card, "category") && username !== card.username;
            const section = hidden ? null : `#${card.category} > section`;

            addCardElement(card.username, card.cardId, card.content, hidden, username !== card.username, section);
        }

        function addCardElement(username, cardId, content, hidden, disabled, appendTo) {
            console.log("Going to add card for user:", username, cardId, content, hidden, disabled, appendTo);
            const card = document.createElement('div');
            if (cardId != null && cardId.length > 0) {
                card.dataset.id = cardId;
            } else {
                card.dataset.id = crypto.randomUUID();
            }

            card.classList.add('card');
            card.classList.add('text-center');
            card.classList.add('m-1');

            if (appendTo === null) {
                card.classList.add('assign-card');
            } else if (!disabled) { // If card belongs to the user
                card.classList.add(draggableClass);
            }

            if (hidden) {
                card.classList.add('d-none');
            }

            card.innerHTML = `
              <div class="card-header">
                <button class="btn btn-sm dislike" onclick="dislikeCard(this)" ${disabled ? '':'disabled'}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-down-fill" viewBox="0 0 16 16">
                        <path d="M6.956 14.534c.065.936.952 1.659 1.908 1.42l.261-.065a1.378 1.378 0 0 0 1.012-.965c.22-.816.533-2.512.062-4.51.136.02.285.037.443.051.713.065 1.669.071 2.516-.211.518-.173.994-.68 1.2-1.272a1.896 1.896 0 0 0-.234-1.734c.058-.118.103-.242.138-.362.077-.27.113-.568.113-.856 0-.29-.036-.586-.113-.857a2.094 2.094 0 0 0-.16-.403c.169-.387.107-.82-.003-1.149a3.162 3.162 0 0 0-.488-.9c.054-.153.076-.313.076-.465a1.86 1.86 0 0 0-.253-.912C13.1.757 12.437.28 11.5.28H8c-.605 0-1.07.08-1.466.217a4.823 4.823 0 0 0-.97.485l-.048.029c-.504.308-.999.61-2.068.723C2.682 1.815 2 2.434 2 3.279v4c0 .851.685 1.433 1.357 1.616.849.232 1.574.787 2.132 1.41.56.626.914 1.28 1.039 1.638.199.575.356 1.54.428 2.591z"/>
                    </svg>
                </button>
                <button class="btn btn-sm like" onclick="likeCard(this)" ${disabled ? '':'disabled'}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-up" viewBox="0 0 16 16">
                      <path d="M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2.144 2.144 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a9.84 9.84 0 0 0-.443.05 9.365 9.365 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111L8.864.046zM11.5 14.721H8c-.51 0-.863-.069-1.14-.164-.281-.097-.506-.228-.776-.393l-.04-.024c-.555-.339-1.198-.731-2.49-.868-.333-.036-.554-.29-.554-.55V8.72c0-.254.226-.543.62-.65 1.095-.3 1.977-.996 2.614-1.708.635-.71 1.064-1.475 1.238-1.978.243-.7.407-1.768.482-2.85.025-.362.36-.594.667-.518l.262.066c.16.04.258.143.288.255a8.34 8.34 0 0 1-.145 4.725.5.5 0 0 0 .595.644l.003-.001.014-.003.058-.014a8.908 8.908 0 0 1 1.036-.157c.663-.06 1.457-.054 2.11.164.175.058.45.3.57.65.107.308.087.67-.266 1.022l-.353.353.353.354c.043.043.105.141.154.315.048.167.075.37.075.581 0 .212-.027.414-.075.582-.05.174-.111.272-.154.315l-.353.353.353.354c.047.047.109.177.005.488a2.224 2.224 0 0 1-.505.805l-.353.353.353.354c.006.005.041.05.041.17a.866.866 0 0 1-.121.416c-.165.288-.503.56-1.066.56z"/>
                    </svg>
                </button>
                <span class="badge text-bg-secondary likes">0</span>
              </div>
              <div class="card-body">
                <p class="card-text">
                <input class="form-control form-control-sm" type="text" onchange="inputChange(this)" ${disabled ? 'disabled':''} value="${content ? content: ''}">
                </p>
              </div>
              <div class="card-footer">
                <small class="text-muted">` + username + `</small>
              </div>
            `;

            if (appendTo === null) {
                appendTo = "#cardAnchor"
            }
            $(appendTo).append(card);
        }

        window.onbeforeunload = disconnect();
    </script>
    {% endblock customJavaScript %}
